// image enhancement 
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

#histogram equalization
img = cv.imread('rose.webp', cv.IMREAD_GRAYSCALE)
assert img is not None, "file could not be read, check with os.path.exists()"
plt.hist(img.ravel(), 256, [0, 256]);
plt.show()

//smoothing
img = cv.imread('opencv.png')
assert img is not None, "file could not be read, check with os.path.exists()"

kernel = np.ones((5, 5), np.float32) / 25
dst = cv.filter2D(img, -1, kernel)

blur = cv.blur(img,(5,5))

plt.subplot(121), plt.imshow(img), plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(dst), plt.title('Averaging')
plt.xticks([]), plt.yticks([])
plt.show()

//contours with area
import numpy as np
import cv2 as cv
import sys

img = cv.imread('rose.webp')

if img is None:
    sys.exit("Could not read the image.")

cv.imshow("Display window", img)
k = cv.waitKey(0)

if k == ord("s"):
    cv.imwrite("rose.webp", img)
img = cv.imread('rose.webp', cv.IMREAD_GRAYSCALE)
assert img is not None, "file could not be read, check with os.path.exists()"
ret, thresh = cv.threshold(img, 175, 255, 0)
contours, hierarchy = cv.findContours(thresh, 1, 2)
#I believe what this doing is taking the area of the white parts of the image in which you will get 2 or 0 2 for tbe white and 0 for black
cnt = contours[0]
M = cv.contourArea(cnt)


print(M)

//2D Histogram
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

img = cv.imread('city.png')
assert img is not None, "file could not be read, check with os.path.exists()"
hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
hist = cv.calcHist([hsv], [0, 1], None, [180, 256], [0, 180, 0, 256])

plt.imshow(hist, interpolation='nearest')
plt.show()

//image segmentation with watershed algorithm
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

img = cv.imread('star.jpg')
assert img is not None, "file could not be read, check with os.path.exists()"
gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
ret, thresh = cv.threshold(gray,0,255,cv.THRESH_BINARY_INV+cv.THRESH_OTSU)
kernel = np.ones((3,3),np.uint8)
opening = cv.morphologyEx(thresh,cv.MORPH_OPEN,kernel, iterations = 2)

cv.imshow("Original Image", img)
cv.imshow("Grayscale Image", gray)
cv.imshow("Threshold Image", thresh)

# Wait for a key press and close all windows
cv.waitKey(0)
cv.destroyAllWindows()
